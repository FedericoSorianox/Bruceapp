/**
 * üíæ STORAGE UTILITIES - Manejo Seguro de Tokens de Autenticaci√≥n
 *
 * M√≥dulo que proporciona funciones seguras para manejar el almacenamiento
 * del token de autenticaci√≥n en localStorage y cookies, con protecci√≥n completa
 * para Server-Side Rendering (SSR) de Next.js.
 *
 * Caracter√≠sticas:
 * - ‚úÖ Compatible con SSR/SSG - verifica si estamos en cliente o servidor
 * - üîë Manejo centralizado de las claves de storage y cookies
 * - üõ°Ô∏è Protecci√≥n contra errores de hidrataci√≥n
 * - üç™ Soporte para cookies HTTP-only para middleware
 * - üéØ API simple y consistente
 * - üì¶ Exportaci√≥n limpia de constantes
 */

/**
 * üîë CLAVES CONSTANTES PARA ALMACENAMIENTO
 *
 * Claves √∫nicas utilizadas para almacenar el token de autenticaci√≥n.
 * Centralizadas para evitar inconsistencias y facilitar cambios futuros.
 */
const KEY = 'auth_token';
const COOKIE_NAME = 'auth-token';
const COOKIE_OPTIONS = {
  httpOnly: true,
  secure: process.env.NODE_ENV === 'production',
  sameSite: 'lax' as const,
  path: '/',
  maxAge: 60 * 60 * 24 * 7, // 7 d√≠as
};

/**
 * üìñ OBTENER TOKEN DE AUTENTICACI√ìN
 * 
 * Funci√≥n que recupera el token de autenticaci√≥n desde localStorage
 * de manera segura, verificando que estemos en el cliente.
 * 
 * Casos de uso:
 * - Inicializaci√≥n del AuthProvider
 * - Verificaci√≥n de sesi√≥n existente
 * - Hidrataci√≥n del estado de autenticaci√≥n
 * 
 * @returns {string | null} Token si existe y estamos en cliente, null en caso contrario
 * 
 * Comportamiento:
 * - En servidor (SSR): retorna null (no existe localStorage)
 * - En cliente sin token: retorna null
 * - En cliente con token: retorna el valor almacenado
 */
export function getToken(): string | null {
  // üö® PROTECCI√ìN SSR - Verifica que estemos en el navegador
  if (typeof window === 'undefined') {
    return null; // En servidor no existe localStorage
  }
  
  // üì± Recupera token del localStorage del navegador
  return localStorage.getItem(KEY);
}

/**
 * üíæ GUARDAR TOKEN DE AUTENTICACI√ìN
 * 
 * Funci√≥n que almacena el token de autenticaci√≥n en localStorage
 * de manera segura, verificando que estemos en el cliente.
 * 
 * Casos de uso:
 * - Despu√©s de login exitoso
 * - Renovaci√≥n de tokens
 * - Persistencia de sesi√≥n
 * 
 * @param {string} token - Token de autenticaci√≥n a almacenar
 * 
 * Comportamiento:
 * - En servidor (SSR): no hace nada (protecci√≥n)
 * - En cliente: guarda el token en localStorage
 */
export function setToken(token: string) {
  // üö® PROTECCI√ìN SSR - Verifica que estemos en el navegador
  if (typeof window === 'undefined') {
    return; // En servidor no se puede acceder a localStorage
  }
  
  // üíæ Almacena token en localStorage del navegador
  localStorage.setItem(KEY, token);
}

/**
 * üóëÔ∏è LIMPIAR TOKEN DE AUTENTICACI√ìN
 * 
 * Funci√≥n que elimina el token de autenticaci√≥n del localStorage
 * de manera segura, verificando que estemos en el cliente.
 * 
 * Casos de uso:
 * - Logout de usuario
 * - Token corrupto o inv√°lido
 * - Limpieza de datos de autenticaci√≥n
 * 
 * Comportamiento:
 * - En servidor (SSR): no hace nada (protecci√≥n)
 * - En cliente: elimina el token del localStorage
 */
export function clearToken() {
  // üö® PROTECCI√ìN SSR - Verifica que estemos en el navegador
  if (typeof window === 'undefined') {
    return; // En servidor no se puede acceder a localStorage
  }
  
  // üóëÔ∏è Elimina token del localStorage del navegador
  localStorage.removeItem(KEY);
}

/**
 * üç™ OBTENER TOKEN DESDE COOKIES (para middleware)
 *
 * Funci√≥n que recupera el token de autenticaci√≥n desde las cookies HTTP-only.
 * Utilizada principalmente por el middleware de Next.js para validaci√≥n server-side.
 *
 * @param {Request} request - Objeto Request de Next.js (solo en middleware)
 * @returns {string | null} Token si existe en las cookies, null en caso contrario
 */
export function getTokenFromCookies(request: Request): string | null {
  const cookies = request.headers.get('cookie');
  if (!cookies) return null;

  // Parsear cookies manualmente
  const cookiePairs = cookies.split(';').map(c => c.trim());
  for (const pair of cookiePairs) {
    const [name, value] = pair.split('=');
    if (name === COOKIE_NAME && value) {
      return decodeURIComponent(value);
    }
  }

  return null;
}

/**
 * üíæ GUARDAR TOKEN EN LOCALSTORAGE
 *
 * Funci√≥n que almacena el token de autenticaci√≥n en localStorage del navegador.
 * Las cookies HTTP-only se manejan por separado en el middleware.
 *
 * @param {string} token - Token de autenticaci√≥n a almacenar
 */
export function setTokenWithCookies(token: string) {
  // Guardar en localStorage (cliente)
  if (typeof window !== 'undefined') {
    localStorage.setItem(KEY, token);
  }
}

/**
 * üóëÔ∏è LIMPIAR TOKEN DE LOCALSTORAGE
 *
 * Funci√≥n que elimina el token de autenticaci√≥n del localStorage del navegador.
 * Las cookies HTTP-only se manejan por separado en el middleware.
 */
export function clearTokenWithCookies() {
  // Limpiar localStorage (cliente)
  if (typeof window !== 'undefined') {
    localStorage.removeItem(KEY);
  }
}

/**
 * üç™ SETEAR COOKIE HTTP-ONLY (para middleware)
 *
 * Funci√≥n para setear una cookie HTTP-only desde el middleware de Next.js.
 * Solo debe usarse en el contexto del middleware.
 *
 * @param {import('next/server').NextResponse} response - Objeto NextResponse
 * @param {string} token - Token de autenticaci√≥n a almacenar
 */
export function setAuthCookie(response: any, token: string) {
  response.cookies.set(COOKIE_NAME, token, COOKIE_OPTIONS);
}

/**
 * üç™ LIMPIAR COOKIE HTTP-ONLY (para middleware)
 *
 * Funci√≥n para eliminar la cookie HTTP-only desde el middleware de Next.js.
 * Solo debe usarse en el contexto del middleware.
 *
 * @param {import('next/server').NextResponse} response - Objeto NextResponse
 */
export function clearAuthCookie(response: any) {
  response.cookies.set(COOKIE_NAME, '', { ...COOKIE_OPTIONS, maxAge: 0 });
}

/**
 * üì§ EXPORTACI√ìN DE CONSTANTES
 *
 * Exporta las claves de storage y cookies para uso en otros m√≥dulos
 * que necesiten acceder directamente o hacer debugging.
 */
export { KEY as AUTH_STORAGE_KEY, COOKIE_NAME as AUTH_COOKIE_NAME, COOKIE_OPTIONS };
