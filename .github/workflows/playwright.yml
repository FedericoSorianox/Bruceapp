# yaml-language-server: $schema=false

name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    environment: Prod
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      ADMIN_USER_EMAIL: ${{ secrets.ADMIN_USER_EMAIL }}
      ADMIN_USER_PASSWORD: ${{ secrets.ADMIN_USER_PASSWORD }}
      NODE_ENV: production
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    
    - name: Install dependencies
      run: npm ci --include=dev
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Build application
      run: npm run build

    - name: Wait for MongoDB to be ready
      run: |
        echo "üîÑ Waiting for MongoDB to be ready..."
        until nc -z localhost 27017; do
          echo "MongoDB not ready yet, waiting..."
          sleep 2
        done
        echo "‚úÖ MongoDB is ready!"

    - name: Debug secrets availability
      run: |
        echo "üîç Checking environment variables:"
        echo "MONGODB_URI is set: $([[ -n "$MONGODB_URI" ]] && echo "‚úÖ Yes" || echo "‚ùå No")"
        echo "JWT_SECRET is set: $([[ -n "$JWT_SECRET" ]] && echo "‚úÖ Yes" || echo "‚ùå No")"
        echo "TEST_USER_EMAIL is set: $([[ -n "$TEST_USER_EMAIL" ]] && echo "‚úÖ Yes" || echo "‚ùå No")"
        echo "TEST_USER_PASSWORD is set: $([[ -n "$TEST_USER_PASSWORD" ]] && echo "‚úÖ Yes" || echo "‚ùå No")"
        echo "ADMIN_USER_EMAIL is set: $([[ -n "$ADMIN_USER_EMAIL" ]] && echo "‚úÖ Yes" || echo "‚ùå No")"
        echo "ADMIN_USER_PASSWORD is set: $([[ -n "$ADMIN_USER_PASSWORD" ]] && echo "‚úÖ Yes" || echo "‚ùå No")"

    - name: Ensure test users exist
      id: ensure_test_users
      run: |
        node scripts/ensure-test-user.js
        echo "TEST_USER_EXISTS=$(node -e 'console.log(require(\"./path/to/your/script\").testUserExists ? \"true\" : \"false\")')" >> $GITHUB_ENV
    
    - name: Debug environment
      run: |
        echo "üîç Environment check:"
        echo "NODE_ENV: $NODE_ENV"
        echo "Test user email: $TEST_USER_EMAIL"
        echo "Admin user email: $ADMIN_USER_EMAIL"
    
    - name: Run Playwright tests
      if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
      run: npx playwright test
    
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Deploy to Render
      run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
